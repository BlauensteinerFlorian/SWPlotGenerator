{"version":3,"sources":["SelectPlotResources.js","functions/PlotOutput.js","functions/WaitingForValuesSelect.js","PlotGenerator.js","App.js","serviceWorker.js","index.js"],"names":["PlotGenerator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","state","searches","selectType","type","e","onSelectChange","target","value","_this2","react_default","a","createElement","className","onChange","label","results","map","resource","url","name","React","Component","PlotOutput","class","allObjects","title","opening_crawl","href","WaitingForValueSelect","disabled","char1search","char2search","planetsearch","Char1SearchResult","Char2SearchResult","PlanetSearchResult","RandomFilmResult","char1Url","char2Url","planetUrl","UpdateKey","UpdateFilm","UpdateSelectChar1","UpdateSelectChar2","UpdateSelectPlanet","showNotification","handleCharValueChange","searchstate","setState","defineProperty","searchresultstate","typesearch","length","resourceType","axios","get","then","response","_this2$setState","data","Math","random","console","log","catch","error","SelectPlotResources_PlotGenerator","key","selectedURL","typeUrl","_this3","randomfilm","floor","char1obj","char2obj","planetobj","_this4","id","GetRandomAttributes","GetUsedObjects","count","_this5","style","display","onClick","placeholder","SetCharSearch","searchChar","index_es","icon","faSearch","ShowChar1Select","WaitForValues","ShowChar2Select","ShowPlanetSelect","GenBtnClicked","GeneratePlot","App","PlotGenerator_PlotGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6fa650b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class PlotGenerator extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            searches: this.props.searches,\n            selectType: this.props.type,\n        };\n    }\n\n    handleChange(e)\n    {\n        this.props.onSelectChange(e.target.value, this.state.selectType);\n    }\n\n    render() {\n        return (\n            <div className=\"control\">\n                <div className=\"select select_resources\">\n                    <select onChange={(e, type) => this.handleChange(e, type)}>\n                        <option value=\"none\" label=\"Pick a Character\">Pick a Character</option>\n                        {\n                            this.state.searches.results.map((resource) => {\n                                return (\n                                    <option value={resource.url} label={resource.name}>{resource.name}</option>\n                                );\n                            })\n                        }\n                    </select>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport default function PlotOutput(props){\n    return (\n        <div>\n            <div className=\"container plotoutput_container\">\n                <h3 class=\"title is-3\">Generated Plot: {props.allObjects[3].title}</h3>\n                <p>{props.allObjects[3].opening_crawl}</p>\n                <br/>\n                <p>{\n                    \"So \" +\n                    props.allObjects[0].name\n                    + \" and \" + \n                    props.allObjects[1].name\n                    + \" are flying to planet \" +\n                    props.allObjects[2].name\n                    + \" to prepare for an epic battle\"\n                    }</p>\n            </div>\n\n            <ul>Used Resources:\n                <li className=\"used_resources\">Character1: <a href={props.allObjects[0].url}>{props.allObjects[0].url}</a></li>\n                <li className=\"used_resources\">Character2: <a href={props.allObjects[1].url}>{props.allObjects[1].url}</a></li>\n                <li className=\"used_resources\">Planet: <a href={props.allObjects[2].url}>{props.allObjects[2].url}</a></li>\n                <li className=\"used_resources\">Film: <a href={props.allObjects[3].url}>{props.allObjects[3].url}</a></li>\n            </ul>\n        </div>\n    );\n}","import React from 'react';\n\nexport default function WaitingForValueSelect(){\n    return (\n        <div className=\"control\">\n            <div className=\"select is-loading select_resources\">\n                <select disabled>\n                    <option>waiting for input!</option>\n                </select>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport axios from 'axios';\nimport SelectPlotResources from './SelectPlotResources';\nimport PlotOutput from './functions/PlotOutput';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport WaitingForValueSelect from './functions/WaitingForValuesSelect';\n\nexport default class PlotGenerator extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            char1search: '',\n            char2search: '',\n            planetsearch: '',\n            Char1SearchResult: [],\n            Char2SearchResult: [],\n            PlanetSearchResult: [],\n            RandomFilmResult: [],\n            char1Url: '',\n            char2Url: '',\n            planetUrl: '',\n            UpdateKey: 0,\n            UpdateFilm: 0,\n            UpdateSelectChar1: 0,\n            UpdateSelectChar2: 0,\n            UpdateSelectPlanet: 0,\n            showNotification: 0,\n        };\n        this.handleCharValueChange = this.handleCharValueChange.bind(this);\n    }\n\n    SetCharSearch(e, searchstate) {\n        this.setState({\n            [searchstate]: e.target.value\n        });\n    }\n\n    searchChar(searchresultstate, typesearch) {\n\n        if(typesearch.length > 0)\n        {\n        let resourceType = typesearch === this.state.planetsearch ? \"planets\" : \"people\";\n\n        axios.get('https://swapi.co/api/' + resourceType + '/?search=' + typesearch)\n            .then(response => {\n                this.setState({ [searchresultstate]: response.data,\n                                 UpdateKey: 0\n                                });\n                searchresultstate === \"Char1SearchResult\" ? this.setState({UpdateSelectChar1: Math.random()}) : console.log();\n                searchresultstate === \"Char2SearchResult\" ? this.setState({UpdateSelectChar2: Math.random()}) : console.log();\n                searchresultstate === \"PlanetSearchResult\" ? this.setState({UpdateSelectPlanet: Math.random()}) : console.log();\n            })\n            .catch(error => {\n                console.log(error);\n            });\n        }\n        else{\n            this.setState({showNotification: 1});\n        }\n    }\n\n    /*    ShowSelect(type) {\n            let searchResult;\n            if (type === \"char1Url\") {\n                searchResult = this.state.Char1SearchResult;\n            }\n            else if (type === \"char2Url\") {\n                searchResult = this.state.Char2SearchResult;\n            }\n            else {\n                searchResult = this.state.PlanetSearchResult;\n            }\n            return <SelectPlotResources searches={searchResult} onSelectChange={this.handleCharValueChange} type={type} />\n        }\n    */\n        ShowChar1Select()\n        {\n            return <SelectPlotResources searches={this.state.Char1SearchResult}\n            onSelectChange={this.handleCharValueChange} type=\"char1Url\" \n            key={this.state.UpdateSelectChar1} />\n        }\n        ShowChar2Select()\n        {\n            return <SelectPlotResources searches={this.state.Char2SearchResult}\n            onSelectChange={this.handleCharValueChange} type=\"char2Url\" \n            key={this.state.UpdateSelectChar2} />\n        }\n        ShowPlanetSelect()\n        {\n            return <SelectPlotResources searches={this.state.PlanetSearchResult}\n            onSelectChange={this.handleCharValueChange} type=\"planetUrl\" \n            key={this.state.UpdateSelectPlanet} />\n        }\n\n\n    WaitForValues() {\n        return <WaitingForValueSelect/>\n    }\n\n    handleCharValueChange(selectedURL, typeUrl) {\n        this.setState({\n            [typeUrl]: selectedURL\n        });\n    }\n\n    GetRandomAttributes() {\n        if (this.state.UpdateFilm === 0) {\n            const randomfilm = 1 + Math.floor(Math.random() * 7);\n            axios.get('https://swapi.co/api/films/' + randomfilm,\n                {\n                }).then(response => {\n                    this.setState({\n                        RandomFilmResult: response.data,\n                        UpdateFilm: 1\n                    });\n                }).catch(error => {\n                    console.log(error);\n                });\n        }\n    }\n    GetUsedObjects() {\n        let char1obj;\n        let char2obj;\n        let planetobj;\n        this.state.Char1SearchResult.results.map((resource) => {\n            resource.url === this.state.char1Url ? char1obj = resource : console.log()\n        })\n\n        this.state.Char2SearchResult.results.map((resource) => {\n            resource.url === this.state.char2Url ? char2obj = resource : console.log()\n        })\n\n        this.state.PlanetSearchResult.results.map((resource) => {\n            resource.url === this.state.planetUrl ? planetobj = resource : console.log()\n        })\n\n        const allObjects = [char1obj, char2obj, planetobj, this.state.RandomFilmResult];\n\n        return allObjects;\n    }\n\n    NoSearchInputNotification()\n    {\n        return <div id=\"notification\" className=\"notification is-danger\">\n        <button className=\"delete\"></button>\n        please fill the input field with <strong>atleast one letter</strong> before searching for characters\n      </div>\n    }\n\n    GeneratePlot() {\n        if (this.state.char1Url !== '' && this.state.char2Url !== '' && this.state.planetUrl !== '') {\n            this.GetRandomAttributes();\n            const allObjects = this.GetUsedObjects();\n            return <PlotOutput allObjects={allObjects}/>\n        }\n    }\n\n    GenBtnClicked() {\n        if(this.state.Char1SearchResult.count > 0 && this.state.Char2SearchResult.count > 0 && this.state.PlanetSearchResult.count > 0)\n        {\n            this.setState({\n                UpdateFilm: 0,\n                UpdateKey: Math.random()\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"hero-body\">\n                <form>\n                <div className=\"notification is-danger\" style={{display: this.state.showNotification ? 'block' : 'none'}}>\n                    <button className=\"delete\" type=\"button\" onClick={() => this.setState({showNotification: 0})} />\n                    please fill the input field with <strong>atleast one letter</strong> before searching for characters\n                </div>\n                    <div className=\"columns\">\n                        <div className=\"field column is-one-third\">\n                            <label className=\"label\">Character 1</label>\n                            <div className=\"control columns\">\n                                <input className=\"input column\" type=\"text\" value={this.state.char1search} placeholder=\"search character\" onChange={(e) => this.SetCharSearch(e, \"char1search\")}></input>\n                                <button className=\"button column is-one-fifth search_btn\" type=\"button\"\n                                    onClick={() => this.searchChar(\"Char1SearchResult\", this.state.char1search)}>\n                                    <span className=\"icon is-small\">\n                                        <FontAwesomeIcon icon={faSearch} />\n                                    </span>\n                                </button>\n                            </div>\n                            {    this.state.Char1SearchResult.count > 0 ? this.ShowChar1Select(\"char1Url\") : this.WaitForValues()\n                            }\n                        </div>\n\n                        <div className=\"field column is-one-third\">\n                            <label className=\"label\">Character 2</label>\n                            <div className=\"control columns\">\n                                <input className=\"input column\" type=\"text\" value={this.state.char2search} placeholder=\"search character\" onChange={(e) => this.SetCharSearch(e, \"char2search\")}></input>\n                                <button className=\"button column is-one-fifth search_btn\" type=\"button\" onClick={() => this.searchChar(\"Char2SearchResult\", this.state.char2search)}>\n                                    <span className=\"icon is-small\">\n                                        <FontAwesomeIcon icon={faSearch} />\n                                    </span>\n                                </button>\n                            </div>\n                            {\n                                this.state.Char2SearchResult.count > 0 ? this.ShowChar2Select(\"char2Url\") : this.WaitForValues()\n                            }\n                        </div>\n\n                        <div className=\"field column is-one-third\">\n                            <label className=\"label\">Planet</label>\n                            <div className=\"control columns\">\n                                <input className=\"input column\" type=\"text\" value={this.state.planetsearch} placeholder=\"search planets\" onChange={(e) => this.SetCharSearch(e, \"planetsearch\")}></input>\n                                <button className=\"button column is-one-fifth search_btn\" type=\"button\" onClick={() => this.searchChar(\"PlanetSearchResult\", this.state.planetsearch)}>\n                                    <span className=\"icon is-small\">\n                                        <FontAwesomeIcon icon={faSearch} />\n                                    </span>\n                                </button>\n                            </div>\n                            {\n                                this.state.PlanetSearchResult.count > 0 ? this.ShowPlanetSelect(\"planetUrl\") : this.WaitForValues()\n                            }\n                        </div>\n                    </div>\n                </form>\n\n                <button type=\"button\" className=\"button is-rounded generate_btn\" \n                onClick={() => this.GenBtnClicked()}>{this.state.UpdateKey > 0 ? \"New Plot\" : \"Generate a Plot\"}</button>\n                {\n                    this.state.UpdateKey > 0 ? this.GeneratePlot() : console.log()\n                }\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport PlotGenerator from './PlotGenerator.js';\nimport './main.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App hero\">\n          <h1 className=\"title is-1\">Star Wars Plot Generator</h1>\n          <PlotGenerator></PlotGenerator>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}